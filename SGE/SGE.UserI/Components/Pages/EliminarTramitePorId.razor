@inject CasoUsoBajaTramite baja

@if(visible){
    <form>
        <div>
            <label for="idTramite">Id Tramite A Eliminar</label>
            <input type="text" class="form-control" id="idTramite" @bind="@idTramite">
        </div>
        <button type="button" class="btn btn-primary" @onclick="Eliminar">Eliminar</button>
        <button type="button" class="btn btn-secondary" @onclick="Ocultar">Cancelar</button>
    <DialogoAlerta @ref="dialogoAlerta" Mensaje = "@alerta"></DialogoAlerta>
    </form>
}
@code
{
    [Parameter] public Usuario User {get; set;}
    [Parameter] public EventCallback OnExpedienteAltaExitosa { get; set; }
    private DialogoAlerta dialogoAlerta = new DialogoAlerta();
    private string alerta = "";
    private int idTramite; 
    private bool visible = false;

    public void Mostrar()
    {
        visible = true;
        StateHasChanged();
    }

    private void Ocultar()
    {
        visible = false;
        StateHasChanged();
    }
    private async Task Eliminar(){
        try
        {
            baja.Ejecutar(idTramite, User);
            this.Ocultar();
            await OnExpedienteAltaExitosa.InvokeAsync();
        }
        catch(Exception e)
        {
            alerta = e.Message; 
            dialogoAlerta.Mostrar();
        }
    }

}