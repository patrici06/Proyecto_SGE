@inject CasoUsoModificacionExpediente casoModificacion
@inject CasoUsoConsultaExpedienteID casoBuscarPorID

@if(visible){
    <div>
        <h4>Ingrese el ID del Expediente a Modificar</h4><br>
        <input placeholder="Id" class="form-control" @bind="idExpediente"><br>
        <button type="button" class="btn btn-secondary" @onclick="Ocultar">Cancelar</button>
        <button type="button" class="btn btn-primary" @onclick="() => Buscar(idExpediente)">Buscar</button>
    </div>
}
@if(visible2){
    <div>
        <h4>Ingrese Campos Del Expediente</h4>
        <form>
            <div class="form-group">
                <label for="caratula">Caratula</label>
                <input placeholder="caratula" class="form-control" @bind="ExpedienteMod.Caratula">
            </div>
            <div class="form-group">
                <label for="FechaCreacion" class="form-label">Fecha de Creaci√≥n</label>
                <input type="datetime-local" class="form-control" id="FechaCreacion" @bind="ExpedienteMod.FechaCreacion" />
            </div>
            <div>
                <p>Estado</p>
                <select @bind="ExpedienteMod.Estado" class="form-control">
                    @foreach (var estado in Enum.GetValues(typeof(EstadoExpediente)))
                    {
                        <option value="@estado">@estado</option>
                    }
                </select>
            </div>
        </form>
        <br>
        <button type="button" class="btn btn-secondary" @onclick="Ocultar">Cancelar</button>
        <button type="button" class="btn btn-primary" @onclick="Modificar">Modificar</button>
    </div>
}
<br>
<DialogoAlerta @ref="dialogoAlerta" Mensaje = "@alerta"></DialogoAlerta>



@code{
 [Parameter] public Usuario User { get; set; }
 [Parameter] public EventCallback OnExpedienteAltaExitosa { get; set; }
 private DialogoAlerta dialogoAlerta = new DialogoAlerta();
 private String alerta = "";
 private int idExpediente;
 private Expediente? ExpedienteMod;


    private bool visible = false;
    private bool visible2 = false;
    public void Mostrar()
    {
        visible = true;
        StateHasChanged();
    }

    private void Ocultar()
    {
        visible = false;
        visible2 = false;
        StateHasChanged();
    }

    private void Buscar(int idExpediente)
    {
        try
        {
            ExpedienteMod = casoBuscarPorID.Ejecutar(idExpediente);
            if(ExpedienteMod == null) throw new RepositorioException("No Existe ese ID");
            else 
            {
                visible2 = true;
                visible = false;
            }
        }
        catch(Exception e)
        {
            alerta = e.Message;
            dialogoAlerta.Mostrar();
        }
    }

    private async Task Modificar(){
        try
        {   
            casoModificacion.Ejecutar(ExpedienteMod, User);
            await OnExpedienteAltaExitosa.InvokeAsync();
            this.Ocultar();
        }
        catch(Exception e)
        {
            alerta = e.Message;
            dialogoAlerta.Mostrar();
        }
    }
}


