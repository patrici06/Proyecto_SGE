@rendermode InteractiveServer
@inject SGE.Aplicacion.CasoUsoModificacionExpediente modificacionExpediente
@inject SGE.Aplicacion.CasoUsoBajaExpediente bajaExpediente
@inject SGE.Aplicacion.UsuarioValidador validador

@if (visible)
{
    <button class="btn btn-danger btn-sm" @onclick="Ocultar">Cerrar</button>
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Caratula</th>
                <th>Fecha de Creación</th>
                <th>Fecha de Última Modificación</th>
                <th>Usuario que Modificó</th>
                <th>Estado</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var e in Lista)
            {
                <tr>
                    <td>@e.Id</td>
                    <td>@e.Caratula</td>
                    <td>@e.FechaCreacion</td>
                    <td>@e.FechaModificacion</td>
                    <td>@e.IdUsuarioModificacion</td>
                    <td>@e.Estado</td>
                    <td>
                        @if (validador.TienePermiso(User, Permiso.ExpedienteBaja))
                        {
                            <button class="btn btn-danger btn-sm" @onclick="() => baja(e)">Eliminar</button>
                        }
                        @if (validador.TienePermiso(User, Permiso.ExpedienteModificacion))
                        {
                            <button class="btn btn-primary btn-sm" @onclick="() => modificar(e)">Modificar</button>
                        }
                        <button class="btn btn-primary btn-sm" @onclick="() => mostrar()">Mostrar Tramites</button>
                    </td>
                </tr>
                <FormularioModificacionExpediente @ref="formularioModificacionExpediente" User="logeado.Usuario"></FormularioModificacionExpediente>
            }
        </tbody>
    </table>
    <TramitesAsociados @ref="tramitesAsociados" Lista="e.Tramites"></TramitesAsociados>
}

@code {
    [Parameter] public List<Expediente> Lista { get; set; } = new List<Expediente>();
    [Parameter] public Usuario User { get; set; }
    private FormularioModificacionExpediente formularioModificacionExpediente = new FormularioModificacionExpediente();
    private TramitesAsociados tramitesAsociados = new TramitesAsociados();
    private String confirmacion = "";
    private DialogoConfirmacion dialogoConfirmacion = new DialogoConfirmacion();

    private bool visible = false;
    public void Mostrar()
    {
            visible = true;
            StateHasChanged();
    }

    private void Ocultar()
    {
        visible = false;
        StateHasChanged();
    }

    private void baja(Expediente expediente)
    {
        try
        {
            bajaExpediente.Ejecutar(expediente.Id);
            Lista.Remove(expediente);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    private void mostrar()
    {
        try
        {
            if(!e.Tramites.Any()) throw new RepositorioException("Este Expediente no Tiene ningún Tramite");
            tramitesAsociados.Mostrar();
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    private void modificar(Expediente expediente)
    {
        try
        {
            if(!validador.TienePermiso(logeado.Usuario, Permiso.ExpedienteModificacion)) throw new AutorizacionException("No Posee Permiso");
            formularioModificacionExpediente.Mostrar();
            StateHasChanged();
            confirmacion = "Modificación Exitosa";
            dialogoConfirmacion.Mostrar();
        }
        catch (Exception e)
        {
            throw e;
        }
    }
}