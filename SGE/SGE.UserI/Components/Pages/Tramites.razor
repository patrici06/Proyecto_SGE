@using SGE.UserI.Components.Pages
@page "/tramites"
@rendermode InteractiveServer
@inject NavigationManager Navegador
@inject SGE.Aplicacion.ServicioExpedientes ServiceExpediente
@inject SGE.Aplicacion.ServicioTramite ServiceTramites
@inject SGE.Aplicacion.ServicioUsuarios ServiceUsuarios
@inject UsuarioValidador validador
@inject ServicioUsuarioEstado loggeado

@if(loggeado.Usuario != null) 
{
    <p>Agregar Tramite</p>
    <DialogoAlerta @ref="dialogo" Mensaje="@msj"></DialogoAlerta>
    <button class="btn btn-primary" @onclick ="AT">AltaTramite</button>

    <p>Listar todo Tramite</p>
    <button class="btn btn-primary" @onclick="MT">Mostrar Todo Tramite</button>
    
    <p>Listar Tramites por Id Expediente</p>
    <input type="text" placeholder="id Expediente de tramites a Buscar" @bind="idExpediente" class="form-control">
    <button class="btn btn-primary" @onclick="TEI">Buscar</button>
    
    <p>Consultar Tramite por id </p>
    <input type="text" placeholder="id a buscar" @bind="numTramite" class="form-control">
    <button class="btn btn-primary" @onclick="MTID">Mostrar Tramite por ID</button>
    
    <p>Listar Tramites mediante etiqueta</p>
    <select @bind="estadoTramite" class="form-control">
        @foreach(var estado in estados)
        {
            <option value="@estado">@estado</option>
        }
    </select>
    <button class="btn btn-primary" @onclick="TE">Buscar</button>
    <div>
        <p>------------------------------------------------------------------</p>
        <h6>Interfaz:</h6>
    </div>
    <TablaTramites @ref="tablaTramitesEtiqueta" tramites="tramitesEtiqueta" STramite="ServiceTramites" Id="usuario.Id" permisoElim="EvaluarUsuario(Permiso.TramiteBaja)" permisoMod="EvaluarUsuario(Permiso.TramiteModificacion)"></TablaTramites>
    <TablaTramites @ref="tablaTramitesPorID" tramites="tramitesPorID" STramite="ServiceTramites" Id="usuario.Id" permisoElim="EvaluarUsuario(Permiso.TramiteBaja)" permisoMod="EvaluarUsuario(Permiso.TramiteModificacion)"></TablaTramites>
    <TablaTramites @ref="tablaTramitesExpediente" tramites="tramitesExpediente" STramite="ServiceTramites" Id="usuario.Id" permisoElim="EvaluarUsuario(Permiso.TramiteBaja)" permisoMod="EvaluarUsuario(Permiso.TramiteModificacion)"></TablaTramites>
    <TablaTramites @ref="tablaTramites" tramites="tramites" STramite="ServiceTramites" Id="usuario.Id" permisoElim="EvaluarUsuario(Permiso.TramiteBaja)" permisoMod="EvaluarUsuario(Permiso.TramiteModificacion)"></TablaTramites>
    <AltaTramite @ref="altaTramite" ServicioT= "ServiceTramites" ServicioE= "ServiceExpediente" IdUsuario="usuario.Id"></AltaTramite>
}
else
{
    <p>No hay un usuario logeado.</p>
}

@code {
    private Usuario usuario = new Usuario("NAU", "NAU", "NAU", "NAU", new List<Permiso>());
    protected override void OnInitialized()
    {
        if (loggeado.Usuario != null)
        {
            usuario = loggeado.Usuario;
        }
    }

    private int idExpediente;
    private int numTramite;
    private string msj = "";

    private List<Tramite> tramites = new List<Tramite>();
    private List<Tramite> tramitesExpediente = new List<Tramite>();
    private List<Tramite> tramitesPorID = new List<Tramite>();
    private List<Tramite>? tramitesEtiqueta = new List<Tramite>();

    private EstadoTramite estadoTramite;
    private List<EstadoTramite> estados = new List<EstadoTramite> {
        EstadoTramite.Despacho,
        EstadoTramite.EscritoPresentado,
        EstadoTramite.PaseAEstudio,
        EstadoTramite.Resolucion,
        EstadoTramite.Notificacion,
        EstadoTramite.PaseAlArchivo
    };

    private AltaTramite altaTramite = null!;
    private DialogoAlerta dialogo = null!;
    private TablaTramites tablaTramites = null!;
    private TablaTramites tablaTramitesExpediente = null!;
    private TablaTramites tablaTramitesPorID = null!;
    private TablaTramites tablaTramitesEtiqueta = null!;

    private void AT()
    {
        try
        {
            if (!EvaluarUsuario(Permiso.TramiteAlta))
                throw new ValidacionException("No posee Permisos requeridos");
            altaTramite.Mostrar();
            tramites = ServiceTramites.ConsultarTodos();
        }
        catch (Exception e)
        {
            msj = e.Message.ToString();
            dialogo.Mostrar();
        }
           finally
        {
            // Asegurarse de llamar StateHasChanged() para actualizar la interfaz
            StateHasChanged();
        }
    }

    private void MT()
    {
        try
        {
            tramites = ServiceTramites.ConsultarTodos()?? new List<Tramite>();
            tablaTramites.Mostrar();
            StateHasChanged();
        }
        catch (Exception e)
        {
            msj = e.Message.ToString();
            dialogo.Mostrar();
        }
    }

    private void TEI()
    {
        try
        {
            Expediente? expediente = ServiceExpediente.ConsultaPorId(idExpediente);
            if (expediente == null)
                throw new RepositorioException("No existe Expediente");
            if(expediente.Tramites == null)
                throw new RepositorioException("No tiene Tramites asociados");
            foreach(var t in expediente.Tramites)
                Console.WriteLine(t.Id);
            tramitesExpediente = expediente.Tramites;
            tablaTramitesExpediente.Mostrar();
        }
        catch (Exception e)
        {
            msj = e.Message.ToString();
            dialogo.Mostrar();
        }
    }

    private void MTID()
    {
        try
        {
            Tramite? tramite = ServiceTramites.ConsultaPorId(numTramite);
            if (tramitesPorID == null)
                tramitesPorID = new List<Tramite>();

            if (tramite == null)
                throw new RepositorioException("No se encontró el trámite");

            tramitesPorID.Add(tramite);
            tablaTramitesPorID.Mostrar();
        }
        catch (Exception e)
        {
            msj = e.Message.ToString();
            dialogo.Mostrar();
        }
    }

    private void TE()
    {
        try
        {
            tramitesEtiqueta = ServiceTramites.ConsultaPorEtiqueta(estadoTramite);
            if (tramitesEtiqueta != null && tramitesEtiqueta.Count == 0)
                throw new ValidacionException("No se encuentran coincidencias");

            tablaTramitesEtiqueta.Mostrar();
        }
        catch (Exception e)
        {
            msj = e.Message.ToString();
            dialogo.Mostrar();
        }
    }

    private bool EvaluarUsuario(Permiso permiso)
    {
        return validador.TienePermiso(usuario, permiso);
    }
}