@using SGE.UserI.Components.Pages
@page "/tramitesfinal"
@rendermode InteractiveServer
@inject NavigationManager Navegador

@inject CasoUsoConsultaExpedienteID consultaExpedienteID

@inject CasoUsoAltaTramite altaTramite
@inject CasoUsoBajaTramite bajaTramite 
@inject CasoUsoConsultaEtiquetaTramite consultaTramiteEtiqueta
@inject CasoUsoConsultaTramites consultaTramites
@* @inject CasoUsoModificacionTramite modificacionTramite
 *@
 
@inject ServicioAutorizacion autorizador
@inject ServicioUsuarioEstado logeado
<PageTitle>Tramites</PageTitle>

@if (logeado.Usuario != null)
{
    <div class="expedientes-container">
        <div class="expediente-section">
            <h2 class="section-title">Gesti√≥n de Tramites</h2>
            <div class="button-group">
                <button class="btn btn-primary btn-lg" @onclick="AltaTramite">Agregar Tramite</button>
                <button class="btn btn-primary btn-lg" @onclick="ModTramite">Modificar Tramite</button>
                <button class="btn btn-primary btn-lg" @onclick="BajaTramite">Dar de Baja Tramite</button>
                <button class="btn btn-primary btn-lg" @onclick="MostrarTramites">Mostrar Todos los Tramites</button>
                <button class="btn btn-primary" @onclick ="MostrarTramitesEtiqueta">Mostrar Por Etiqueta</button>
            </div>
        </div>
    </div>
    <br><br><br>


    //recursos Modularizados
    <FormularioTramite @ref="formularioTramite" User="logeado.Usuario" OnExpedienteAltaExitosa="MostrarConfirmacion"></FormularioTramite>
    <EliminarTramitePorId @ref="eliminarTramiteId" User="logeado.Usuario" OnExpedienteAltaExitosa="MostrarConfirmacion"></EliminarTramitePorId>
    <TablaTramites @ref="tablaTramites" Lista= "@tramites" User="logeado.Usuario"></TablaTramites>
    <TramitesEtiquetas @ref="tramitesEtiquetas" user="logeado.Usuario"></TramitesEtiquetas>
    <ModificarTramite @ref="modificacionTramite" User="logeado.Usuario" OnExpedienteAltaExitosa="MostrarConfirmacion"></ModificarTramite>
    //Alertas de excepciones
   <br>
    <DialogoAlerta @ref="dialogoAlerta" Mensaje = "@alerta"></DialogoAlerta>
    <DialogoConfirmacion @ref="dialogoConfirmacion" Mensaje = "@confirmacion"></DialogoConfirmacion>
}
else
{
    <p>No hay un usuario logeado.</p>
}
@code{

    private EliminarTramitePorId eliminarTramiteId = new EliminarTramitePorId();
    //private FormularioModificacionTramite eliminarTramiteId = new FormularioModificacionTramite();
    private TablaTramites tablaTramites = new TablaTramites(); 
    private TramitesEtiquetas tramitesEtiquetas = new TramitesEtiquetas();
    private FormularioTramite formularioTramite = new FormularioTramite();
    private List<Tramite>? tramites = new List<Tramite>();
    private ModificarTramite modificacionTramite = new ModificarTramite();


    private DialogoAlerta dialogoAlerta = new DialogoAlerta();
    private DialogoConfirmacion dialogoConfirmacion = new DialogoConfirmacion();
    private string confirmacion = "";
    private string alerta = "";

    
    //private string excepcionEtiqueta = "";
    
    private void MostrarConfirmacion()
    {
        dialogoConfirmacion.Mostrar();
        StateHasChanged();
    }
    private void MostrarTramites()
    {
        try
        {
            tramites = consultaTramites.Ejecutar();
            tablaTramites.Mostrar();
        }
        catch (Exception e)
        {
            alerta = e.Message;
            dialogoAlerta.Mostrar();
        }
    }
    private void AltaTramite(){
        try{
            if(logeado.Usuario == null) throw new ValidacionException("se produjo un error al iniciar sesion");
            if(!autorizador.TienePermiso(logeado.Usuario, Permiso.TramiteAlta)) throw new AutorizacionException("No Posee Permiso");
            formularioTramite.Mostrar();
            confirmacion = "AltaExitosa";
        }
        catch (Exception e)
        {
            alerta = e.Message;
            dialogoAlerta.Mostrar();
        }
    }
    private void MostrarTramitesEtiqueta(){
        try{
            tramitesEtiquetas.Mostrar();
        }
        catch(Exception e){
            alerta = e.Message; 
            dialogoAlerta.Mostrar();
        }
    }
    private void ModTramite(){
        try
        {
            modificacionTramite.Mostrar(); 
            confirmacion = "Modificacion exitosa";
        }
        catch(Exception e)
        {
            alerta = e.Message; 
            dialogoAlerta.Mostrar(); 
        }
    }
    private void BajaTramite(){
        try
        {
            eliminarTramiteId.Mostrar();
            confirmacion = "BajaExitosa"; 
        }
        catch(Exception e)
        {
            alerta = e.Message; 
            dialogoAlerta.Mostrar(); 
        }
    }
}