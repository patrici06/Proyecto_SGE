@using SGE.UserI.Components.Pages
@page "/tramitesfinal"
@rendermode InteractiveServer
@inject NavigationManager Navegador

@inject CasoUsoConsultaExpedienteID consultaExpedienteID

@inject CasoUsoAltaTramite altaTramite
@inject CasoUsoBajaTramite bajaTramite 
@inject CasoUsoConsultaEtiquetaTramite consultaTramiteEtiqueta
@inject CasoUsoConsultaTramiteID consultaTramiteID
@inject CasoUsoConsultaTramites consultaTramites
@* @inject CasoUsoModificacionTramite modificacionTramite
 *@
 
@inject ServicioAutorizacion autorizador
@inject ServicioUsuarioEstado logeado
<PageTitle>Tramites</PageTitle>

@if (logeado.Usuario != null)
{
    <div class="expedientes-container">
        <div class="expediente-section">
            <h2 class="section-title">Gesti√≥n de Tramites</h2>
            <div class="button-group">
                <button class="btn btn-primary btn-lg" @onclick="AltaTramite">Agregar Tramite</button>
                <button class="btn btn-primary btn-lg" @onclick="ModTramite">Modificar Tramite</button>
                <button class="btn btn-primary btn-lg" @onclick="BajaTramite">Dar de Baja Tramite</button>
                <button class="btn btn-primary btn-lg" @onclick="MostrarTramites">Mostrar Todos los Tramites</button>
                <button class="btn btn-primary" @onclick ="MostrarTramitesEtiqueta">Mostrar Tramites Por Etiqueta</button>
            </div>
        </div>
    </div>
    <br><br><br>


    //recursos Modularizados
    <FormularioTramite @ref="formularioTramite" User="logeado.Usuario"></FormularioTramite>
    <FormularioModificacionTramite @ref="eliminarTramiteId" User="logeado.Usuario"></FormularioModificacionTramite>
    <TablaTramites @ref="tablaTramites" Lista= "@tramites" User="logeado.Usuario"></TablaTramites>
    <TramitesEtiquetas @ref="tramitesEtiquetas" user="logeado.Usuario"></TramitesEtiquetas>
    <ModificarTramite @ref="modificacionTramite" User="logeado.Usuario"></ModificarTramite>
    //Alertas de excepciones
    <DialogoAlerta @ref="formulario" Mensaje = "@excepcionAlta"></DialogoAlerta> 
    <DialogoAlerta @ref="vacio" Mensaje= "@excepcion"></DialogoAlerta>
    <DialogoAlerta @ref="ModificarD" Mensaje= "@modificar"></DialogoAlerta>
    <DialogoAlerta @ref="EliminarD" Mensaje= "@eliminar"></DialogoAlerta>
}
else
{
    <p>No hay un usuario logeado.</p>
}
@code{

    private EliminarTramitePorId eliminarPorId = new EliminarTramitePorId();
    private FormularioModificacionTramite eliminarTramiteId = new FormularioModificacionTramite();
    private TablaTramites tablaTramites = new TablaTramites(); 
    private FormularioTramite formularioTramite = new FormularioTramite();
    private List<Tramite>? tramites = new List<Tramite>();
    private List<Tramite> tramitesEtiqueta =  new List<Tramite>(); 
    
    private ModificarTramite modificacionTramite = new ModificarTramite();
    private DialogoAlerta ModificarD = new DialogoAlerta();
    private DialogoAlerta vacio = new DialogoAlerta();
    private DialogoAlerta formulario = new DialogoAlerta();
    private DialogoAlerta EliminarD= new DialogoAlerta();
    private TramitesEtiquetas tramitesEtiquetas = new TramitesEtiquetas();
    private string excepcion = "";
    private string excepcionAlta = "";
    private string modificar = "";
    private string eliminar = "";
    //private string excepcionEtiqueta = "";

    private void MostrarTramites()
    {
        try
        {
            tramites = consultaTramites.Ejecutar();
            tablaTramites.Mostrar();
        }
        catch (Exception e)
        {
            excepcion = e.Message;
            vacio.Mostrar();
        }
    }
    private void AltaTramite(){
        try{
            if(!autorizador.TienePermiso(logeado.Usuario, Permiso.TramiteAlta)) throw new AutorizacionException("No Posee Permiso");
            formularioTramite.Mostrar();
            StateHasChanged();
        }
        catch (Exception e)
        {
            excepcionAlta = e.Message;
            formulario.Mostrar();
        }
    }
    private void MostrarTramitesEtiqueta(){
        tramitesEtiquetas.Mostrar();
    }
    private void ModTramite(){
        try
        {
            modificacionTramite.Mostrar(); 
        }
        catch(Exception e)
        {
            modificar = e.Message; 
            ModificarD.Mostrar(); 
        }
    }
    private void BajaTramite(){
        try
        {
            eliminarPorId.Mostrar(); 
        }
        catch(Exception e)
        {
            eliminar = e.Message; 
            EliminarD.Mostrar(); 
        }
    }
}